# Do not edit this file directly. Use a ‘docker-compose.override.yaml’ file if you can.
# Refer to `docker-compose.override.yaml.example’ for some sample configurations.

services:
  api:
    # container_name: LibreChat
    ports:
      - "${PORT}:${PORT}"
    depends_on:
      - mongodb
      - rag_api
    image: ghcr.io/danny-avila/librechat-dev:latest
    restart: always
    user: "${UID}:${GID}"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - HOST=0.0.0.0
      - MONGO_URI=mongodb://mongodb:27017/LibreChat
      - MEILI_HOST=http://meilisearch:7700
      - RAG_PORT=${RAG_PORT:-8000}
      - RAG_API_URL=http://rag_api:${RAG_PORT:-8000}
    volumes:
      - type: bind
        source: ./.env
        target: /app/.env
      - ./images:/app/client/public/images
      - ./logs:/app/api/logs
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.librechat.rule=Host(`your-domain.com`)"
      - "traefik.http.routers.librechat.entrypoints=websecure"
      - "traefik.http.routers.librechat.tls.certResolver=letsencrypt"
      - "traefik.http.services.librechat.loadbalancer.server.port=3000"
    networks:
      - dokploy-network
  mongodb:
    # container_name: chat-mongodb
    image: mongo
    restart: always
    user: "${UID}:${GID}"
    volumes:
      - ./data-node:/data/db
    command: mongod --noauth
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mongo.rule=Host(`your-domain.com`)"
      - "traefik.http.routers.mongo.entrypoints=websecure"
      - "traefik.http.routers.mongo.tls.certResolver=letsencrypt"
      - "traefik.http.services.mongo.loadbalancer.server.port=3000"
    networks:
      - dokploy-network
  meilisearch:
    # container_name: chat-meilisearch
    image: getmeili/meilisearch:v1.12.3
    restart: always
    user: "${UID}:${GID}"
    environment:
      - MEILI_HOST=http://meilisearch:7700
      - MEILI_NO_ANALYTICS=true
      - MEILI_MASTER_KEY=${MEILI_MASTER_KEY}
    volumes:
      - ./meili_data_v1.12:/meili_data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.meilisearch.rule=Host(`your-domain.com`)"
      - "traefik.http.routers.meilisearch.entrypoints=websecure"
      - "traefik.http.routers.meilisearch.tls.certResolver=letsencrypt"
      - "traefik.http.services.meilisearch.loadbalancer.server.port=3000"
    networks:
      - dokploy-network
  vectordb:
    # container_name: vectordb
    image: ankane/pgvector:latest
    environment:
      POSTGRES_DB: mydatabase
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
    restart: always
    volumes:
      - pgdata2:/var/lib/postgresql/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgvector.rule=Host(`your-domain.com`)"
      - "traefik.http.routers.pgvector.entrypoints=websecure"
      - "traefik.http.routers.pgvector.tls.certResolver=letsencrypt"
      - "traefik.http.services.pgvector.loadbalancer.server.port=3000"
    networks:
      - dokploy-network
  rag_api:
    # container_name: rag_api
    image: ghcr.io/danny-avila/librechat-rag-api-dev-lite:latest
    environment:
      - DB_HOST=vectordb
      - RAG_PORT=${RAG_PORT:-8000}
    restart: always
    depends_on:
      - vectordb
    env_file:
      - .env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rag.rule=Host(`your-domain.com`)"
      - "traefik.http.routers.rag.entrypoints=websecure"
      - "traefik.http.routers.rag.tls.certResolver=letsencrypt"
      - "traefik.http.services.rag.loadbalancer.server.port=3000"
    networks:
      - dokploy-network

volumes:
  pgdata2:

networks:
  dokploy-network:
    external: true
